openapi: 3.0.0
info:
  title: Naturally Good(Admin)
  description: API endpoints for Naturally Goods documented on Swagger
  contact:
    name: Deepak Singh
    email: deepak@techavtar.com
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local server

components: 
  securitySchemes: 
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /complaintType/create:
    post:
      summary: Create a new Complaint Type
      tags:
        - Complaints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ComplaintType:
                  type: string
                  example: "Delivery Issue"
                Status:
                  type: string
                  enum: [active, inactive]
                  example: "active"
                Resolution:
                  type: string
                  example: "Resolved by rescheduling delivery"
                Description:
                  type: string
                  example: "The delivery was delayed by 3 days"
      security:
        - bearerAuth: []
      responses:
        201:
          description: Complaint Type created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Complaint Type created successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  details:
                    type: string
                    example: Error details message

  /complaintType/allComplaintType:
    get:
      summary: Get all Complaint Types
      security:
        - bearerAuth: []
      tags:
        - Complaints
      responses:
        200:
          description: List of all Complaint Types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "60d0fe4f5311236168a109ca"
                    ComplaintType:
                      type: string
                      example: "Delivery Issue"
                    Status:
                      type: string
                      enum: [active, inactive]
                      example: "active"
                    Resolution:
                      type: string
                      example: "Resolved by rescheduling delivery"
                    Description:
                      type: string
                      example: "The delivery was delayed by 3 days"
                    CreatedBy:
                      type: string
                      example: "60d0fe4f5311236168a109cb"
                    CreatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
                    UpdatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"

  /complaintType/{id}:
    get:
      summary: Get a Complaint Type by ID
      security:
        - bearerAuth: []
      tags:
        - Complaints
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the complaint type
      responses:
        200:
          description: Complaint Type retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "60d0fe4f5311236168a109ca"
                  ComplaintType:
                    type: string
                    example: "Delivery Issue"
                  Status:
                    type: string
                    enum: [active, inactive]
                    example: "active"
                  Resolution:
                    type: string
                    example: "Resolved by rescheduling delivery"
                  Description:
                    type: string
                    example: "The delivery was delayed by 3 days"
                  CreatedBy:
                    type: string
                    example: "60d0fe4f5311236168a109cb"
                  CreatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
                  UpdatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
        404:
          description: Complaint Type not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Complaint Type not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  details:
                    type: string
                    example: Error details message

    put:
      summary: Update a Complaint Type by ID
      security:
        - bearerAuth: []
      tags:
        - Complaints
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the complaint type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ComplaintType:
                  type: string
                  example: "Delivery Issue"
                Status:
                  type: string
                  enum: [active, inactive]
                  example: "active"
                Resolution:
                  type: string
                  example: "Resolved by rescheduling delivery"
                Description:
                  type: string
                  example: "The delivery was delayed by 3 days"
      responses:
        200:
          description: Complaint Type updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "60d0fe4f5311236168a109ca"
                  ComplaintType:
                    type: string
                    example: "Delivery Issue"
                  Status:
                    type: string
                    enum: [active, inactive]
                    example: "active"
                  Resolution:
                    type: string
                    example: "Resolved by rescheduling delivery"
                  Description:
                    type: string
                    example: "The delivery was delayed by 3 days"
                  CreatedBy:
                    type: string
                    example: "60d0fe4f5311236168a109cb"
                  CreatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
                  UpdatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
        404:
          description: Complaint Type not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Complaint Type not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  details:
                    type: string
                    example: Error details message

    delete:
      summary: Delete a Complaint Type by ID
      security:
        - bearerAuth: []
      tags:
        - Complaints
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the complaint type
      responses:
        200:
          description: Complaint Type deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Complaint Type deleted successfully
        404:
          description: Complaint Type not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Complaint Type not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  details:
                    type: string
                    example: Error details message

  /dropDown/types:
    get:
      summary: Get all Types
      tags:
        - Types
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all Types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "60d0fe4f5311236168a109ca"
                    Name:
                      type: string
                      example: "Staples"
                    CreatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
                    UpdatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    post:
      summary: Create a new Type
      tags:
        - Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Staples"
      security:
        - bearerAuth: []
      responses:
        201:
          description: Type created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "60d0fe4f5311236168a109ca"
                  Name:
                    type: string
                    example: "Staples"
                  CreatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
                  UpdatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
        400:
          description: Type already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Type already exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /dropDown/types/{id}:
    delete:
      summary: Delete a Type by ID
      tags:
        - Types
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the Type
      responses:
        204:
          description: Type deleted successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /dropDown/seasons:
    get:
      summary: Get all Seasons
      tags:
        - Seasons
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all Seasons
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "60d0fe4f5311236168a109ca"
                    Name:
                      type: string
                      example: "Spring"
                    CreatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
                    UpdatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    post:
      summary: Create a new Season
      tags:
        - Seasons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Spring"
      security:
        - bearerAuth: []
      responses:
        201:
          description: Season created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "60d0fe4f5311236168a109ca"
                  Name:
                    type: string
                    example: "Spring"
                  CreatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
                  UpdatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
        400:
          description: Season already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Season already exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /dropDown/seasons/{id}:
    delete:
      summary: Delete a Season by ID
      tags:
        - Seasons
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the Season
      responses:
        204:
          description: Season deleted successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /dropDown/rosters:
    get:
      summary: Get all Rosters
      tags:
        - Rosters
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all Rosters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "60d0fe4f5311236168a109ca"
                    Name:
                      type: string
                      example: "Mandatory"
                    CreatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
                    UpdatedAt:
                      type: string
                      format: date-time
                      example: "2023-08-06T14:34:08.000Z"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    post:
      summary: Create a new Roster
      tags:
        - Rosters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: "Mandatory"
      security:
        - bearerAuth: []
      responses:
        201:
          description: Roster created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "60d0fe4f5311236168a109ca"
                  Name:
                    type: string
                    example: "Mandatory"
                  CreatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
                  UpdatedAt:
                    type: string
                    format: date-time
                    example: "2023-08-06T14:34:08.000Z"
        400:
          description: Roster already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Roster already exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /dropDown/rosters/{id}:
    delete:
      summary: Delete a Roster by ID
      tags:
        - Rosters
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the Roster
      responses:
        204:
          description: Roster deleted successfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /product:
    post:
      summary: Create a new Product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      security:
        - bearerAuth: []
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product name already exists"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

    get:
      summary: Get all products with pagination
      tags:
        - Products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The page number to retrieve
          required: false
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of items to retrieve per page
          required: false
          example: 10
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of products with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of products
                    example: 100
                  currentpage:
                    type: integer
                    description: The current page number
                    example: 1
                  totalpages:
                    type: integer
                    description: Total number of pages
                    example: 10
                  prevPage:
                    type: boolean
                    description: Indicates if there is a previous page
                    example: false
                  nextPage:
                    type: boolean
                    description: Indicates if there is a next page
                    example: true
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /product/{id}:
    get:
      summary: Get a product by its ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the product to retrieve
          example: "60d0fe4f5311236168a109ca"
      responses:
        200:
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid product ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid product ID format"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

    put:
      summary: Update a product by its ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the product to update
          example: "60d0fe4f5311236168a109ca"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      security:
        - bearerAuth: []
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid product ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid product ID format"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

    delete:
      summary: Delete a product by its ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the product to delete
          example: "60d0fe4f5311236168a109ca"
      security:
        - bearerAuth: []
      responses:
        200:
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product deleted successfully"
        400:
          description: Invalid product ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid product ID format"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /product/filter:
    get:
      summary: Filter products based on query parameters
      tags:
        - Products
      parameters:
        - in: query
          name: ProductName
          schema:
            type: string
          description: The name of the product to filter by
          example: "Sample Product"
        - in: query
          name: Type
          schema:
            type: string
          description: The type of the product to filter by
          example: "Staples"
        - in: query
          name: Season
          schema:
            type: string
          description: The season of the product to filter by
          example: "Spring"
        - in: query
          name: Price
          schema:
            type: number
          description: The price of the product to filter by
          example: 99.99
        - in: query
          name: Stock
          schema:
            type: number
          description: The stock of the product to filter by
          example: 50
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of filtered products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        404:
          description: Products not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Products not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

components: 
  securitySchemes: 
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: "60d0fe4f5311236168a109ca"
        ProductName:
          type: string
          example: "Sample Product"
        Type:
          type: string
          example: "Staples"
        Season:
          type: string
          example: "Spring"
        Priority:
          type: string
          example: "High"
        Roster:
          type: string
          example: "Weekly"
        VeggieNameInHindi:
          type: string
          example: "उदाहरण सब्जी"
        UnitQuantity:
          type: number
          example: 1
        Price:
          type: number
          format: float
          example: 99.99
        MinimumUnits:
          type: number
          example: 1
        MaximumUnits:
          type: number
          example: 100
        Group:
          type: string
          example: "Green Vegetables"
        ImageURL:
          type: string
          example: "http://example.com/image.jpg"
        Description:
          type: string
          example: "This is a sample product."
        Available:
          type: boolean
          example: true
        Visibility:
          type: string
          enum: ['Admin', 'Public']
          example: 'Admin'
        UpdatedAt:
          type: string
          format: date-time
          example: "2024-08-06T14:48:00.000Z"
        CreatedAt:
          type: string
          format: date-time
          example: "2024-08-05T14:48:00.000Z"
        createdBy:
          type: string
          example: "60d0fe4f5311236168a109ca"
